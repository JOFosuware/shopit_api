// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/jofosuware/go/shopit/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// DeleteOrderById provides a mock function with given fields: orderId
func (_m *Repo) DeleteOrderById(orderId uuid.UUID) error {
	ret := _m.Called(orderId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrderById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(orderId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAllItems provides a mock function with given fields:
func (_m *Repo) FetchAllItems() ([]*models.Item, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchAllItems")
	}

	var r0 []*models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Item, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllOrders provides a mock function with given fields:
func (_m *Repo) FetchAllOrders() ([]*models.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchAllOrders")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllPayment provides a mock function with given fields:
func (_m *Repo) FetchAllPayment() ([]*models.Payment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchAllPayment")
	}

	var r0 []*models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Payment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Payment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllShipping provides a mock function with given fields:
func (_m *Repo) FetchAllShipping() ([]*models.Shipping, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchAllShipping")
	}

	var r0 []*models.Shipping
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Shipping, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Shipping); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Shipping)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchItemsById provides a mock function with given fields: orderId
func (_m *Repo) FetchItemsById(orderId uuid.UUID) ([]*models.Item, error) {
	ret := _m.Called(orderId)

	if len(ret) == 0 {
		panic("no return value specified for FetchItemsById")
	}

	var r0 []*models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*models.Item, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*models.Item); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrderById provides a mock function with given fields: orderId
func (_m *Repo) FetchOrderById(orderId uuid.UUID) (*models.Order, error) {
	ret := _m.Called(orderId)

	if len(ret) == 0 {
		panic("no return value specified for FetchOrderById")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Order, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Order); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrdersById provides a mock function with given fields: userID
func (_m *Repo) FetchOrdersById(userID uuid.UUID) ([]*models.Order, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FetchOrdersById")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*models.Order, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*models.Order); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchPaymentById provides a mock function with given fields: orderId
func (_m *Repo) FetchPaymentById(orderId uuid.UUID) (*models.Payment, error) {
	ret := _m.Called(orderId)

	if len(ret) == 0 {
		panic("no return value specified for FetchPaymentById")
	}

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Payment, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Payment); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchShippingById provides a mock function with given fields: orderId
func (_m *Repo) FetchShippingById(orderId uuid.UUID) (*models.Shipping, error) {
	ret := _m.Called(orderId)

	if len(ret) == 0 {
		panic("no return value specified for FetchShippingById")
	}

	var r0 *models.Shipping
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Shipping, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Shipping); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Shipping)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertItem provides a mock function with given fields: i
func (_m *Repo) InsertItem(i models.Item) (*models.Item, error) {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for InsertItem")
	}

	var r0 *models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Item) (*models.Item, error)); ok {
		return rf(i)
	}
	if rf, ok := ret.Get(0).(func(models.Item) *models.Item); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Item) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrder provides a mock function with given fields: order
func (_m *Repo) InsertOrder(order models.Order) (*models.Order, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrder")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Order) (*models.Order, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(models.Order) *models.Order); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPayment provides a mock function with given fields: p
func (_m *Repo) InsertPayment(p models.Payment) (*models.Payment, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for InsertPayment")
	}

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Payment) (*models.Payment, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(models.Payment) *models.Payment); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Payment) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertShipping provides a mock function with given fields: s
func (_m *Repo) InsertShipping(s models.Shipping) (*models.Shipping, error) {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for InsertShipping")
	}

	var r0 *models.Shipping
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Shipping) (*models.Shipping, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(models.Shipping) *models.Shipping); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Shipping)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Shipping) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: orderId, ord
func (_m *Repo) UpdateOrder(orderId uuid.UUID, ord models.Order) error {
	ret := _m.Called(orderId, ord)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.Order) error); ok {
		r0 = rf(orderId, ord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStock provides a mock function with given fields: productId, quantity
func (_m *Repo) UpdateStock(productId uuid.UUID, quantity int) error {
	ret := _m.Called(productId, quantity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, int) error); ok {
		r0 = rf(productId, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
