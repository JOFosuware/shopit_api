// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	http "net/http"

	models "github.com/jofosuware/go/shopit/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AuthenticateUC is an autogenerated mock type for the AuthenticateUC type
type AuthenticateUC struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: userID
func (_m *AuthenticateUC) DeleteUser(userID uuid.UUID) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserToken provides a mock function with given fields: userID
func (_m *AuthenticateUC) DeleteUserToken(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *AuthenticateUC) GetAllUsers() ([]*models.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetails provides a mock function with given fields: userID
func (_m *AuthenticateUC) GetUserDetails(userID uuid.UUID) (*models.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDetails")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *AuthenticateUC) Login(email string, password string) (*models.UserResponse, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *models.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.UserResponse, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.UserResponse); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: user, avatar
func (_m *AuthenticateUC) Register(user models.User, avatar string) (*models.UserResponse, error) {
	ret := _m.Called(user, avatar)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *models.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User, string) (*models.UserResponse, error)); ok {
		return rf(user, avatar)
	}
	if rf, ok := ret.Get(0).(func(models.User, string) *models.UserResponse); ok {
		r0 = rf(user, avatar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(models.User, string) error); ok {
		r1 = rf(user, avatar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: token, password
func (_m *AuthenticateUC) ResetPassword(token string, password string) (*models.UserResponse, error) {
	ret := _m.Called(token, password)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *models.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.UserResponse, error)); ok {
		return rf(token, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.UserResponse); ok {
		r0 = rf(token, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPasswordResetEmail provides a mock function with given fields: email, r
func (_m *AuthenticateUC) SendPasswordResetEmail(email string, r *http.Request) (*models.Response, error) {
	ret := _m.Called(email, r)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordResetEmail")
	}

	var r0 *models.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *http.Request) (*models.Response, error)); ok {
		return rf(email, r)
	}
	if rf, ok := ret.Get(0).(func(string, *http.Request) *models.Response); ok {
		r0 = rf(email, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *http.Request) error); ok {
		r1 = rf(email, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: userId, passwords
func (_m *AuthenticateUC) UpdatePassword(userId uuid.UUID, passwords models.Passwords) (*models.UserResponse, error) {
	ret := _m.Called(userId, passwords)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 *models.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.Passwords) (*models.UserResponse, error)); ok {
		return rf(userId, passwords)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.Passwords) *models.UserResponse); ok {
		r0 = rf(userId, passwords)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, models.Passwords) error); ok {
		r1 = rf(userId, passwords)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: user, avatar
func (_m *AuthenticateUC) UpdateProfile(user models.User, avatar string) error {
	ret := _m.Called(user, avatar)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User, string) error); ok {
		r0 = rf(user, avatar)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: userID, user
func (_m *AuthenticateUC) UpdateUser(userID uuid.UUID, user models.User) (*models.UserResponse, error) {
	ret := _m.Called(userID, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *models.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.User) (*models.UserResponse, error)); ok {
		return rf(userID, user)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.User) *models.UserResponse); ok {
		r0 = rf(userID, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, models.User) error); ok {
		r1 = rf(userID, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthenticateUC creates a new instance of AuthenticateUC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticateUC(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthenticateUC {
	mock := &AuthenticateUC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
