// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	models "github.com/jofosuware/go/shopit/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// DeleteAvatar provides a mock function with given fields:
func (_m *Repo) DeleteAvatar() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAvatar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAvatarById provides a mock function with given fields: id
func (_m *Repo) DeleteAvatarById(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAvatarById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTokenById provides a mock function with given fields: userId
func (_m *Repo) DeleteTokenById(userId uuid.UUID) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTokenById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserById provides a mock function with given fields: id
func (_m *Repo) DeleteUserById(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUsers provides a mock function with given fields:
func (_m *Repo) DeleteUsers() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAllUsers provides a mock function with given fields:
func (_m *Repo) FetchAllUsers() ([]*models.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchAllUsers")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAvatarById provides a mock function with given fields: userId
func (_m *Repo) FetchAvatarById(userId uuid.UUID) (models.Avatar, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FetchAvatarById")
	}

	var r0 models.Avatar
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Avatar, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Avatar); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(models.Avatar)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchTokenById provides a mock function with given fields: id
func (_m *Repo) FetchTokenById(id uuid.UUID) (*models.Token, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FetchTokenById")
	}

	var r0 *models.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Token, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Token); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserByEmail provides a mock function with given fields: email
func (_m *Repo) FetchUserByEmail(email string) (*models.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserById provides a mock function with given fields: id
func (_m *Repo) FetchUserById(id uuid.UUID) (*models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserByToken provides a mock function with given fields: token
func (_m *Repo) FetchUserByToken(token string) (*models.User, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserByToken")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAvatar provides a mock function with given fields: avatar
func (_m *Repo) InsertAvatar(avatar *models.Avatar) (models.Avatar, error) {
	ret := _m.Called(avatar)

	if len(ret) == 0 {
		panic("no return value specified for InsertAvatar")
	}

	var r0 models.Avatar
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Avatar) (models.Avatar, error)); ok {
		return rf(avatar)
	}
	if rf, ok := ret.Get(0).(func(*models.Avatar) models.Avatar); ok {
		r0 = rf(avatar)
	} else {
		r0 = ret.Get(0).(models.Avatar)
	}

	if rf, ok := ret.Get(1).(func(*models.Avatar) error); ok {
		r1 = rf(avatar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertToken provides a mock function with given fields: t, userID
func (_m *Repo) InsertToken(t *models.Token, userID uuid.UUID) error {
	ret := _m.Called(t, userID)

	if len(ret) == 0 {
		panic("no return value specified for InsertToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Token, uuid.UUID) error); ok {
		r0 = rf(t, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertUser provides a mock function with given fields: user
func (_m *Repo) InsertUser(user models.User) (*models.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for InsertUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (*models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user
func (_m *Repo) UpdateUser(user models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
