// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	models "github.com/jofosuware/go/shopit/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProductUC is an autogenerated mock type for the ProductUC type
type ProductUC struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: p, imgs
func (_m *ProductUC) CreateProduct(p models.Product, imgs []*multipart.FileHeader) (*models.ProdResponse, error) {
	ret := _m.Called(p, imgs)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *models.ProdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Product, []*multipart.FileHeader) (*models.ProdResponse, error)); ok {
		return rf(p, imgs)
	}
	if rf, ok := ret.Get(0).(func(models.Product, []*multipart.FileHeader) *models.ProdResponse); ok {
		r0 = rf(p, imgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Product, []*multipart.FileHeader) error); ok {
		r1 = rf(p, imgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductReview provides a mock function with given fields: review
func (_m *ProductUC) CreateProductReview(review models.Reviews) error {
	ret := _m.Called(review)

	if len(ret) == 0 {
		panic("no return value specified for CreateProductReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Reviews) error); ok {
		r0 = rf(review)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: productId
func (_m *ProductUC) DeleteProduct(productId uuid.UUID) error {
	ret := _m.Called(productId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(productId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductReview provides a mock function with given fields: productId, reviewId
func (_m *ProductUC) DeleteProductReview(productId uuid.UUID, reviewId uuid.UUID) error {
	ret := _m.Called(productId, reviewId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(productId, reviewId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdminProducts provides a mock function with given fields:
func (_m *ProductUC) GetAdminProducts() ([]*models.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAdminProducts")
	}

	var r0 []*models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductReviews provides a mock function with given fields: productId
func (_m *ProductUC) GetProductReviews(productId uuid.UUID) ([]models.Reviews, error) {
	ret := _m.Called(productId)

	if len(ret) == 0 {
		panic("no return value specified for GetProductReviews")
	}

	var r0 []models.Reviews
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Reviews, error)); ok {
		return rf(productId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Reviews); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reviews)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: keyword, page
func (_m *ProductUC) GetProducts(keyword string, page int) (*models.GetProd, error) {
	ret := _m.Called(keyword, page)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 *models.GetProd
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (*models.GetProd, error)); ok {
		return rf(keyword, page)
	}
	if rf, ok := ret.Get(0).(func(string, int) *models.GetProd); ok {
		r0 = rf(keyword, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetProd)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(keyword, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleProduct provides a mock function with given fields: productId
func (_m *ProductUC) GetSingleProduct(productId uuid.UUID) (*models.Product, error) {
	ret := _m.Called(productId)

	if len(ret) == 0 {
		panic("no return value specified for GetSingleProduct")
	}

	var r0 *models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Product, error)); ok {
		return rf(productId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Product); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: productId, p, imgs
func (_m *ProductUC) UpdateProduct(productId uuid.UUID, p models.Product, imgs []*multipart.File) (*models.ProdResponse, error) {
	ret := _m.Called(productId, p, imgs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *models.ProdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.Product, []*multipart.File) (*models.ProdResponse, error)); ok {
		return rf(productId, p, imgs)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.Product, []*multipart.File) *models.ProdResponse); ok {
		r0 = rf(productId, p, imgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, models.Product, []*multipart.File) error); ok {
		r1 = rf(productId, p, imgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductUC creates a new instance of ProductUC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductUC(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductUC {
	mock := &ProductUC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
