// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/jofosuware/go/shopit/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// DeleteImageUrlById provides a mock function with given fields: id
func (_m *Repo) DeleteImageUrlById(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImageUrlById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProductById provides a mock function with given fields: id
func (_m *Repo) DeleteProductById(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReviewById provides a mock function with given fields: productId
func (_m *Repo) DeleteReviewById(productId uuid.UUID) error {
	ret := _m.Called(productId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReviewById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(productId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAllProducts provides a mock function with given fields:
func (_m *Repo) FetchAllProducts() ([]*models.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchAllProducts")
	}

	var r0 []*models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchImageUrlById provides a mock function with given fields: id
func (_m *Repo) FetchImageUrlById(id uuid.UUID) ([]models.Images, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FetchImageUrlById")
	}

	var r0 []models.Images
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Images, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Images); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Images)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchProductById provides a mock function with given fields: id
func (_m *Repo) FetchProductById(id uuid.UUID) (*models.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FetchProductById")
	}

	var r0 *models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchProductByName provides a mock function with given fields: keyword, page
func (_m *Repo) FetchProductByName(keyword string, page int) ([]models.Product, int, error) {
	ret := _m.Called(keyword, page)

	if len(ret) == 0 {
		panic("no return value specified for FetchProductByName")
	}

	var r0 []models.Product
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int) ([]models.Product, int, error)); ok {
		return rf(keyword, page)
	}
	if rf, ok := ret.Get(0).(func(string, int) []models.Product); ok {
		r0 = rf(keyword, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(keyword, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(keyword, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchReviewById provides a mock function with given fields: productId
func (_m *Repo) FetchReviewById(productId uuid.UUID) ([]models.Reviews, error) {
	ret := _m.Called(productId)

	if len(ret) == 0 {
		panic("no return value specified for FetchReviewById")
	}

	var r0 []models.Reviews
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Reviews, error)); ok {
		return rf(productId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Reviews); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reviews)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchReviews provides a mock function with given fields:
func (_m *Repo) FetchReviews() ([]models.Reviews, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchReviews")
	}

	var r0 []models.Reviews
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Reviews, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Reviews); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reviews)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertImageUrl provides a mock function with given fields: img
func (_m *Repo) InsertImageUrl(img *models.Images) (models.Images, error) {
	ret := _m.Called(img)

	if len(ret) == 0 {
		panic("no return value specified for InsertImageUrl")
	}

	var r0 models.Images
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Images) (models.Images, error)); ok {
		return rf(img)
	}
	if rf, ok := ret.Get(0).(func(*models.Images) models.Images); ok {
		r0 = rf(img)
	} else {
		r0 = ret.Get(0).(models.Images)
	}

	if rf, ok := ret.Get(1).(func(*models.Images) error); ok {
		r1 = rf(img)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertProduct provides a mock function with given fields: p
func (_m *Repo) InsertProduct(p *models.Product) (models.Product, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for InsertProduct")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Product) (models.Product, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(*models.Product) models.Product); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(*models.Product) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertReview provides a mock function with given fields: r
func (_m *Repo) InsertReview(r *models.Reviews) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for InsertReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Reviews) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: productId, p
func (_m *Repo) UpdateProduct(productId uuid.UUID, p *models.Product) (models.Product, error) {
	ret := _m.Called(productId, p)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.Product) (models.Product, error)); ok {
		return rf(productId, p)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.Product) models.Product); ok {
		r0 = rf(productId, p)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, *models.Product) error); ok {
		r1 = rf(productId, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReview provides a mock function with given fields: r
func (_m *Repo) UpdateReview(r *models.Reviews) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Reviews) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
