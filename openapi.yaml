openapi: 3.0.0
info:
  title: "Shopit API"
  description: "API for the Shopit e-commerce platform."
  version: "1.0.0"

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  # Authentication
  /auth/register:
    post:
      summary: Register a new user
      tags: ["Authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input

  /auth/login:
    post:
      summary: Login a user
      tags: ["Authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Unauthorized

  /auth/me:
    get:
      summary: Get current user
      tags: ["Authentication"]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    put:
      summary: Update current user
      tags: ["Authentication"]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  # Products
  /products:
    get:
      summary: Get all products
      tags: ["Products"]
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      tags: ["Products"]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized

  /products/{id}:
    get:
      summary: Get a product by ID
      tags: ["Products"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      summary: Update a product
      tags: ["Products"]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProduct'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '404':
          description: Product not found
    delete:
      summary: Delete a product
      tags: ["Products"]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Product not found

  # Orders
  /orders:
    get:
      summary: Get user's orders
      tags: ["Orders"]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
    post:
      summary: Create a new order
      tags: ["Orders"]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized

  /orders/{id}:
    get:
      summary: Get an order by ID
      tags: ["Orders"]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '404':
          description: Order not found
    put:
      summary: Update an order's status
      tags: ["Orders"]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrder'
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '404':
          description: Order not found

  # Payment
  /payment/stripe:
    post:
      summary: Process a Stripe payment
      tags: ["Payment"]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StripePaymentRequest'
      responses:
        '200':
          description: Payment successful
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Auth Schemas
    NewUser:
      type: object
      properties:
        first_name: { type: string, example: "John" }
        last_name: { type: string, example: "Doe" }
        email: { type: string, format: email, example: "john.doe@example.com" }
        password: { type: string, format: password, example: "strongpassword123" }
    UpdateUser:
      type: object
      properties:
        first_name: { type: string, example: "John" }
        last_name: { type: string, example: "Doe" }
        email: { type: string, format: email, example: "john.doe@example.com" }
    LoginCredentials:
      type: object
      properties:
        email: { type: string, format: email, example: "john.doe@example.com" }
        password: { type: string, format: password, example: "strongpassword123" }
    AuthToken:
      type: object
      properties:
        token: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        first_name: { type: string, example: "John" }
        last_name: { type: string, example: "Doe" }
        email: { type: string, format: email, example: "john.doe@example.com" }
        is_admin: { type: boolean, example: false }

    # Product Schemas
    Product:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Laptop" }
        description: { type: string, example: "A powerful laptop" }
        price: { type: number, format: float, example: 1299.99 }
        stock: { type: integer, example: 50 }
        image: { type: string, format: url, example: "http://example.com/image.png" }
        category_id: { type: integer, example: 4 }
    NewProduct:
      type: object
      properties:
        name: { type: string, example: "New Gadget" }
        description: { type: string, example: "The latest and greatest gadget" }
        price: { type: number, format: float, example: 199.99 }
        stock: { type: integer, example: 100 }
        category_id: { type: integer, example: 4 }
    UpdateProduct:
      type: object
      properties:
        name: { type: string, example: "Updated Gadget" }
        description: { type: string, example: "An even better description" }
        price: { type: number, format: float, example: 179.99 }
        stock: { type: integer, example: 150 }
        category_id: { type: integer, example: 4 }

    # Order Schemas
    Order:
      type: object
      properties:
        id: { type: integer, example: 101 }
        user_id: { type: integer, example: 1 }
        total: { type: number, format: float, example: 399.98 }
        status: { type: string, example: "pending" }
        paid: { type: boolean, example: false }
        payment_method: { type: string, example: "stripe" }
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    OrderItem:
      type: object
      properties:
        product_id: { type: integer, example: 2 }
        quantity: { type: integer, example: 2 }
    NewOrder:
      type: object
      properties:
        payment_method: { type: string, example: "stripe" }
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    UpdateOrder:
      type: object
      properties:
        status: { type: string, example: "shipped" }

    # Payment Schemas
    StripePaymentRequest:
      type: object
      properties:
        order_id: { type: integer, example: 101 }
        amount: { type: number, format: float, example: 399.98 }