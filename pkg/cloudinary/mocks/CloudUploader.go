// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	uploader "github.com/cloudinary/cloudinary-go/api/uploader"
	mock "github.com/stretchr/testify/mock"
)

// CloudUploader is an autogenerated mock type for the CloudUploader type
type CloudUploader struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: id
func (_m *CloudUploader) Destroy(id string) (*uploader.DestroyResult, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 *uploader.DestroyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*uploader.DestroyResult, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *uploader.DestroyResult); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uploader.DestroyResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadToCloud provides a mock function with given fields: folder, data
func (_m *CloudUploader) UploadToCloud(folder string, data interface{}) (*uploader.UploadResult, error) {
	ret := _m.Called(folder, data)

	if len(ret) == 0 {
		panic("no return value specified for UploadToCloud")
	}

	var r0 *uploader.UploadResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (*uploader.UploadResult, error)); ok {
		return rf(folder, data)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) *uploader.UploadResult); ok {
		r0 = rf(folder, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uploader.UploadResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(folder, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCloudUploader creates a new instance of CloudUploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudUploader {
	mock := &CloudUploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
