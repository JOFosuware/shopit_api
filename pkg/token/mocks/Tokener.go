// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	time "time"

	models "github.com/jofosuware/go/shopit/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Tokener is an autogenerated mock type for the Tokener type
type Tokener struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: userID, ttl, scope
func (_m *Tokener) GenerateToken(userID uuid.UUID, ttl time.Duration, scope string) (*models.Token, error) {
	ret := _m.Called(userID, ttl, scope)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *models.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Duration, string) (*models.Token, error)); ok {
		return rf(userID, ttl, scope)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Duration, string) *models.Token); ok {
		r0 = rf(userID, ttl, scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, time.Duration, string) error); ok {
		r1 = rf(userID, ttl, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokener creates a new instance of Tokener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokener(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tokener {
	mock := &Tokener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
